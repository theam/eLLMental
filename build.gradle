plugins {
    id "java"
    id "io.freefair.lombok" version "8.3"
    id 'maven-publish'
    id 'signing'
}

def rootGroup = "com.theagilemonkeys.ellmental"
def rootVersion = properties['version']
def rootSourceCompatibility = properties['sourceCompatibility']

allprojects {
    repositories {
        mavenCentral()
    }
}

java {
    sourceCompatibility = rootSourceCompatibility
}

dependencies {
    testImplementation(platform("org.junit:junit-bom:5.9.1"))
    testImplementation("org.junit.jupiter:junit-jupiter")
}

subprojects { subproject ->
    group = rootGroup
    version = rootVersion

    apply plugin: 'java'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    sourceCompatibility = rootSourceCompatibility

    java {
        withSourcesJar()
        withJavadocJar()
    }
    
    repositories {
        mavenCentral()
    }

    test {
        useJUnitPlatform()
    }

    if (!subproject.name.startsWith('examples:')) {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java

                    groupId = subproject.group
                    artifactId = subproject.name
                    version = subproject.version

                    // Additional Pom information
                    pom {
                        name = subproject.name
                        description = subproject.description
                        // ... other POM properties
                    }
                }
            }

            repositories {
                maven {
                    name = 'OSSRH'
                    url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")

                    credentials {
                        username = System.getenv("MAVEN_USERNAME")
                        password = System.getenv("MAVEN_PASSWORD")
                    }
                }
            }
        }

        signing {
            def privateKey = System.getenv('MAVEN_BASE64_PRIVATE_KEY')
            def passphrase = System.getenv('MAVEN_KEY_PASSPHRASE')

            if (privateKey && passphrase) {
                useInMemoryPgpKeys(privateKey, passphrase)
                sign publishing.publications
            } else {
                println "Private key or passphrase for signing not found. Skipping signing..."
            }
        }
    }
}

tasks.test {
    useJUnitPlatform()
}
