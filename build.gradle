plugins {
    id "java"
    id "io.freefair.lombok" version "8.3"
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

def rootGroup = "com.theagilemonkeys.ellmental"
def rootVersion = properties['version']
def rootSourceCompatibility = JavaVersion.VERSION_17
def publishablePackages = [
    "core": "Core library for eLLMental",
    "embeddingsgeneration": "Embeddings generation module for eLLMental",
    "embeddingsstore": "Embeddings store module for eLLMental",
    "embeddingsspace": "Embeddings space module for eLLMental",
    "textgeneration": "Text generation module for eLLMental",
]

allprojects {
    repositories {
        mavenCentral()
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = rootSourceCompatibility
        targetCompatibility = rootSourceCompatibility
    }
}

java {
    sourceCompatibility = rootSourceCompatibility
    targetCompatibility = rootSourceCompatibility
}

dependencies {
    testImplementation(platform("org.junit:junit-bom:5.9.1"))
    testImplementation("org.junit.jupiter:junit-jupiter")
}

subprojects { subproject ->
    group = rootGroup
    version = rootVersion
    description = publishablePackages[subproject.name]

    apply plugin: 'java'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    sourceCompatibility = rootSourceCompatibility

    java {
        withSourcesJar()
        withJavadocJar()
    }
    
    repositories {
        mavenCentral()
    }

    test {
        useJUnitPlatform()
    }

    if (publishablePackages.containsKey(subproject.name)) {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java

                    groupId = subproject.group
                    artifactId = subproject.name
                    version = subproject.version

                    // Additional Pom information
                    pom {
                        name = subproject.name
                        description = subproject.description
                        url = 'https://github.com/theam/ellmental'
                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        developers {
                            developer {
                                id = 'theam'
                                name = 'The Agile Monkeys'
                                email = 'info@theagilemonkeys.com'
                            }
                        }
                        scm {
                            connection = 'scm:git:git://github.com/theam/ellmental.git'
                            developerConnection = 'scm:git:ssh://github.com:theam/ellmental.git'
                            url = 'https://github.com/theam/ellmental'
                        }
                    }
                }
            }

            repositories {
                maven {
                    name = 'OSSRH'
                    url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")

                    credentials {
                        username = System.getenv("MAVEN_USERNAME")
                        password = System.getenv("MAVEN_PASSWORD")
                    }
                }
            }
        }

        signing {
            def privateKey = System.getenv('MAVEN_BASE64_PRIVATE_KEY')
            def passphrase = System.getenv('MAVEN_KEY_PASSPHRASE')

            if (privateKey && passphrase) {
                useInMemoryPgpKeys(privateKey, passphrase)
                sign publishing.publications
            } else {
                println "Private key or passphrase for signing not found. Skipping signing..."
            }
        }
    }
}

tasks.test {
    useJUnitPlatform()
}

nexusPublishing {
    packageGroup = rootGroup
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))

            username = System.getenv("MAVEN_USERNAME")
            password = System.getenv("MAVEN_PASSWORD")
        }
    }
}